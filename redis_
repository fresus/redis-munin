#!/bin/sh
#
# The following code is released in public domain (where applicable).
# http://creativecommons.org/publicdomain/zero/1.0/

#%# family=auto
#%# capabilities=autoconf suggest


[ $ip ] && ip="-h $ip"
[ $port ] && port="-p $port"
[ $socket ] && socket="-s $socket" 
[ $password ] && passwd="-a $password"
[ -z $instance ] && $instance=$(echo $0|cut -d'_' -f 2-)
rinfo="$(which redis-cli) $ip $port $socket $passwd info"

if [ "$1" = "autoconf" ]; then
    $rinfo >/dev/null 2>&1 && echo yes && exit 0
    echo no
    exit 0
fi

if [ "$1" = "suggest" ]; then
    $rinfo >/dev/null 2>&1 && echo $instance
    exit 0
fi

if [ "$1" = "config" ]; then
    # Expose all possibles graphes according to server's capabilities
    $rinfo | awk -F: '

    /^changes_since_last_save:/ {
        print "multigraph redis_changes_since_last_save_'$instance'";
        print "graph_title Redis '$instance' changes since last save" ;
        print "graph_info Number of write operations since last SAVE or BGSAVE";
        print "graph_category redis";
        print "changes.label changes";
    };

    /^keyspace_hits:/ {
        print "multigraph redis_commands_'$instance'";
        print "graph_order commands hits misses";
        print "graph_title Redis '$instance' commands rate";
        print "graph_category redis";
        print "graph_vlabel commands/s";
        print "graph_info Redis '$instance' commands per second";
        print "commands.label commands/s";
        print "commands.type COUNTER";
        print "commands.min 0";
        print "hits.label key hits";
        print "hits.type COUNTER";
        print "hits.min 0";
        print "misses.label key misses";
        print "misses.type COUNTER";
        print "misses.min 0";
    };

    /^total_connections_received:/ {
        print "multigraph redis_total_connections_'$instance'";
        print "graph_title Redis '$instance' connections rate";
        print "graph_category redis";
        print "graph_vlabel connections/s";
        print "graph_info Connections per second to the redis '$instance' server";
        print "connections.label connections";
        print "connections.info connections per second";
        print "connections.type COUNTER";
        print "connections.min 0";
    };

    /^used_memory:/ {
        print "multigraph redis_memory_'$instance'";
        print "graph_title Redis '$instance' memory usage";
        print "graph_category redis";
        print "graph_vlabel mem used";
        print "graph_info Memory allocated by redis '$instance'";
        print "graph_args --base 1024 -l 0";
        print "memory.label memory";
        print "memory.info Amount of mem used by redis '$instance'";
        print "memory.type GAUGE";
        print "memory.min 0";
    };

    /^connected_clients:/ {
        print "multigraph redis_clients_'$instance'";
        print "graph_title Redis '$instance' connected clients";
        print "graph_category redis";
        print "graph_vlabel clients";
        print "graph_info Number of currently connected clients";
        print "clients.label clients";
        print "clients.type GAUGE";
        print "clients.min 0";
    };

    /^mem_fragmentation_ratio:/ {
        print "multigraph redis_fragmentation_'$instance'";
        print "graph_title Redis '$instance' memory fragmentation";
        print "graph_category redis";
        print "graph_vlabel fragmentation ratio";
        print "graph_info Ratio between redis '$instance' RSS usage and allocated memory";
        print "frag.label fragmentation ratio";
        print "frag.type GAUGE";
        print "frag.min 0";
    };

    /^expired_keys:/ {
        print "multigraph redis_expired_keys_'$instance'";
        print "graph_title Redis '$instance' expired keys rate";
        print "graph_category redis";
        print "graph_vlabel expired keys/s";
        print "graph_info Expired redis '$instance' keys per second";
        print "expired.label expired keys";
        print "expired.info expired keys per second";
        print "expired.type COUNTER";
        print "expired.min 0";
    };

    /^evicted_keys:/ {
        print "multigraph redis_evicted_keys_'$instance'";
        print "graph_title Redis '$instance' evicted keys rate";
        print "graph_category redis";
        print "graph_vlabel evicted keys/s";
        print "graph_info Evicted redis '$instance' keys per second";
        print "evicted.label evicted keys";
        print "evicted.info evicted keys per second";
        print "evicted.type COUNTER";
        print "evicted.min 0";
    };

    /^pubsub_channels:/ {
        print "multigraph redis_pubsub_channels_'$instance'";
        print "graph_title Redis '$instance' pubsub channels";
        print "graph_category redis";
        print "graph_vlabel channels";
        print "graph_info Number of pubsub channels";
        print "channels.label channels";
        print "channels.type GAUGE";
        print "channels.min 0";
    };

    /^blocked_clients:/ {
        print "multigraph redis_blocked_clients_'$instance'";
        print "graph_title Redis '$instance' blocked clients";
        print "graph_category redis";
        print "graph_vlabel clients";
        print "graph_info Number of blocked clients";
        print "blocked.label clients";
        print "blocked.type GAUGE";
        print "blocked.min 0";
        print "blocked.warning 1";
    };

    /^db/ {
        split($2, where, "=|,");
        dbskeys[$1]    = where[2];
        dbsexpires[$1] = where[4];
    };

    END {
        print "multigraph redis_dbs_'$instance'";
        print "graph_title Redis '$instance' dbs";
        print "graph_category redis";
        print "graph_vlabel keys";
        print "graph_info Number of keys per dbs";

        for (i in dbskeys)
            print i "keys.label " i " keys"
            print i "keys.type GAUGE"
            print i "keys.min 0"
            print i "expires.label " i " expired keys"
            print i "expires.type GAUGE"
            print i "expires.min 0";
    };

    '
    exit $?
fi

$rinfo | awk -F: '

    /^changes_since_last_save:/ {
        print "multigraph redis_changes_since_last_save_'$instance'";
        print "changes.value " $2 ;
    };

    /^total_connections_received:/ {
        print "multigraph redis_total_connections_'$instance'";
        print "connections.value " $2 ;
    };

    /^used_memory:/ {
        print "multigraph redis_memory_'$instance'";
        print "memory.value " $2 ;
    };

    /^connected_clients:/ {
        print "multigraph redis_clients_'$instance'";
        print "clients.value " $2 ;
    };

    /^mem_fragmentation_ratio:/ {
        print "multigraph redis_fragmentation_'$instance'";
        print "frag.value " $2 ;
    };

    /^expired_keys:/ {
        print "multigraph redis_expired_keys_'$instance'";
        print "expired.value " $2 ;
    };

    /^evicted_keys:/ {
        print "multigraph redis_evicted_keys_'$instance'";
        print "evicted.value " $2 ;
    };

    /^pubsub_channels:/ {
        print "multigraph redis_pubsub_channels_'$instance'";
        print "channels.value " $2 ;
    };

    /^blocked_clients:/ {
        print "multigraph redis_blocked_clients_'$instance'";
        print "blocked.value " $2 ;
    };

    /^total_commands_processed:/ {
        commands=$2
    };

    /^keyspace_hits:/ {
        hits=$2
    };

    /^keyspace_misses:/ {
        misses=$2
    };

    /^db/ {
        split($2, where, "=|,");
        dbskeys[$1]    = where[2];
	dbsexpires[$1] = where[4];
    };

    END {
        print "multigraph redis_commands_'$instance'";
        print "commands.value " commands;
        print "hits.value " hits;
        print "misses.value " misses;

        print "multigraph redis_dbs_'$instance'";
        for (i in dbskeys)
            print i "keys.value "    dbskeys[i]
            print i "expires.value " dbsexpires[i];
    };
'

